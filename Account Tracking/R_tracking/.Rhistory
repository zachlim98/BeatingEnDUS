nrow(test)+1-2
for (s in ncol(test)){
for (t in nrow(test)) {
test2[s,t] = BlackScholes(test[s,t], 450, 0.01, (nrow(test)+1-t)/365, 1.2, "p")
}
}
for (s in 1:ncol(test)){
for (t in 1:nrow(test)) {
test2[s,t] = BlackScholes(test[s,t], 450, 0.01, (nrow(test)+1-t)/365, 1.2, "p")
}
}
View(test2)
for (s in seq(1:ncol(test))){
for (t in seq(1:nrow(test))) {
test2[s,t] = BlackScholes(test[s,t], 450, 0.01, (nrow(test)+1-t)/365, 1.2, "p")
}
}
for (s in seq(1:ncol(test))){
for (t in seq(1:nrow(test))) {
test2[s,t] <- BlackScholes(test[s,t], 450, 0.01, (nrow(test)+1-t)/365, 1.2, "p")
}
}
seq(1:ncol(test))
nrow(test)
for (s in ncol(test)){
for (t in nrow(test)) {
test2[s,t] <- BlackScholes(test[s,t], 450, 0.01, (nrow(test)+1-t)/365, 1.2, "p")
}
}
for (s in 1:ncol(test)){
for (t in 1:nrow(test)) {
test2[s,t] <- BlackScholes(test[s,t], 450, 0.01, (nrow(test)+1-t)/365, 1.2, "p")
}
}
test2 <- matrix(,9,2)
test2
test2 <- matrix(0,9,2)
for (s in 1:ncol(test)){
for (t in 1:nrow(test)) {
test2[s,t] <- BlackScholes(test[s,t], 450, 0.01, (nrow(test)+1-t)/365, 1.2, "p")
}
}
BlackScholes(test[1,1], 450, 0.01, (nrow(test)+1-1)/365, 1.2, "p")
BlackScholes(test[1,1], 450, 0.01, ((nrow(test)+1-1)/365), 1.2, "p")
test[1,1]
BlackScholes(test[1,1], 450, 0.01, ((nrow(test)+1-1)/365), 1.2, "P")
for (s in 1:ncol(test)){
for (t in 1:nrow(test)) {
test2[s,t] <- BlackScholes(test[s,t], 450, 0.01, (nrow(test)+1-t)/365, 1.2, "P")
}
}
View(test2)
test[1,5]
test[5,2]
for (s in 1:ncol(test)){
for (t in 1:nrow(test)) {
test2[t,s] <- BlackScholes(test[t,s], 450, 0.01, (nrow(test)+1-t)/365, 1.2, "P")
}
}
View(test2)
putPrice <- matrix(0,9,1000)
View(putPrice)
for (s in 1:ncol(gbm)){
for (t in 1:nrow(gbm)) {
putPrice[t,s] <- BlackScholes(gbm[t,s], 450, 0.01, (nrow(gbm)+1-t)/365, 1.2, "P")
}
}
plottest <- as.data.frame(putPrice) %>%
mutate(ix = 1:nrow(gbm)) %>%
pivot_longer(-ix, names_to = 'sim', values_to = 'price')
plottest %>%
ggplot(aes(x=ix, y=price, color=sim)) +
geom_line() +
labs(x="Days", y="Price", title="1000 Simulations of ROKU price") +
theme(legend.position = 'none')
#get prices for ROKU
roku_price <- riingo_prices("AAPL", start_date = "2010-01-01")
#calculate log daily returns
returns_tib <- tibble(returns = diff(log(roku_price$adjClose), lag=1))
#plot log daily returns
returns_tib %>% ggplot(aes(x=returns)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
u = mean(returns_tib$returns)
var = var(returns_tib$returns)
drift = u - (0.5*var)
stdd = sqrt(var)
gbm_loop <- function(nsim = 100, t = 25, mu = 0, sigma = 0.1, S0 = 100, dt = 1./365) {
gbm <- matrix(ncol = nsim, nrow = t)
for (simu in 1:nsim) {
gbm[1, simu] <- S0
for (day in 2:t) {
epsilon <- rnorm(1)
dt = 1 / 365
gbm[day, simu] <- gbm[(day-1), simu] * exp((mu - sigma * sigma / 2) * dt + sigma * epsilon * sqrt(dt))
}
}
return(gbm)
}
nsim <- 1000
t <- 37
mu <- u
sigma <- stdd
S0 <- 135.39
sigma <- stdd
S0 <- 135.39
gbm <- gbm_loop(nsim, t, mu, sigma, S0)
gbm_df <- as.data.frame(gbm) %>%
mutate(ix = 1:nrow(gbm)) %>%
pivot_longer(-ix, names_to = 'sim', values_to = 'price')
gbm_df %>%
ggplot(aes(x=ix, y=price, color=sim)) +
geom_line() +
labs(x="Days", y="Price", title="1000 Simulations of ROKU price") +
theme(legend.position = 'none')
BlackScholes <- function(S, K, r, T, sig, type){
if(type=="C"){
d1 <- (log(S/K) + (r + sig^2/2)*T) / (sig*sqrt(T))
d2 <- d1 - sig*sqrt(T)
value <- S*pnorm(d1) - K*exp(-r*T)*pnorm(d2)
return(value)}
if(type=="P"){
d1 <- (log(S/K) + (r + sig^2/2)*T) / (sig*sqrt(T))
d2 <- d1 - sig*sqrt(T)
value <-  (K*exp(-r*T)*pnorm(-d2) - S*pnorm(-d1))
return(value)}
}
putPrice <- matrix(0,9,1000)
for (s in 1:ncol(gbm)){
for (t in 1:nrow(gbm)) {
putPrice[t,s] <- BlackScholes(gbm[t,s], 122.5, 0.01, (nrow(gbm)+1-t)/365, 0.37, "P")
}
}
putPrice <- matrix(0,39,1000)
for (s in 1:ncol(gbm)){
for (t in 1:nrow(gbm)) {
putPrice[t,s] <- BlackScholes(gbm[t,s], 122.5, 0.01, (nrow(gbm)+1-t)/365, 0.37, "P")
}
}
plottest <- as.data.frame(putPrice) %>%
mutate(ix = 1:nrow(gbm)) %>%
pivot_longer(-ix, names_to = 'sim', values_to = 'price')
nrow(gmb)
nrow(gbm)
putPrice <- matrix(0,37,1000)
for (s in 1:ncol(gbm)){
for (t in 1:nrow(gbm)) {
putPrice[t,s] <- BlackScholes(gbm[t,s], 122.5, 0.01, (nrow(gbm)+1-t)/365, 0.37, "P")
}
}
plottest <- as.data.frame(putPrice) %>%
mutate(ix = 1:nrow(gbm)) %>%
pivot_longer(-ix, names_to = 'sim', values_to = 'price')
View(plottest)
plottest %>%
ggplot(aes(x=ix, y=price, color=sim)) +
geom_line() +
labs(x="Days", y="Price", title="1000 Simulations of AAPL price") +
theme(legend.position = 'none')
BlackScholes(90, 122.5, 0.01, 0, 0.37, "P")
BlackScholes(100, 122.5, 0.01, 0, 0.37, "P")
BlackScholes(123, 122.5, 0.01, 0, 0.37, "P")
gbm_vec <- function(nsim = 100, t = 25, mu = 0, sigma = 0.1, S0 = 100, dt = 1./365) {
# matrix of random draws - one for each day for each simulation
epsilon <- matrix(rnorm(t*nsim), ncol = nsim, nrow = t)
# get GBM and convert to price paths
gbm <- exp((mu - sigma * sigma / 2) * dt + sigma * epsilon * sqrt(dt))
gbm <- apply(rbind(rep(S0, nsim), gbm), 2, cumprod)
return(gbm)
}
gbm <- gbm_vec(nsim, t, mu, sigma, S0)
View(gbm)
diff(1:10, lag=1)
diff([2,5,1,2], lag=1)
po <- 2,3,4,5,2
po <- list(2,3,4,5,2)
po
diff(po, lag=1)
po <- [1,2,4,6,2]
po <- (1,2,4,6,2)
list(1,4,5)
#plot log daily returns
returns_tib %>% ggplot(aes(x=returns)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
library(tidyquant)
aapl_daily_returns <- roku_price %>%
tq_transmute(select = adjClose,           # this specifies which column to select
mutate_fun = periodReturn,   # This specifies what to do with that column
period = "daily",      # This argument calculates Daily returns
col_rename = "aapl_returns")
aapl_daily_returns <- roku_price %>%
tq_transmute(select = adjClose,           # this specifies which column to select
mutate_fun = periodReturn,   # This specifies what to do with that column
period = "daily",      # This argument calculates Daily returns
col_rename = "aapl_returns")
View(aapl_daily_returns)
View(aapl_daily_returns)
#plot log daily returns
aapl_daily_returns %>% ggplot(aes(x=aapl_returns)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
#plot log daily returns
aapl_daily_returns %>% ggplot(aes(x=aapl_returns)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
#get prices for ROKU
roku_price <- riingo_prices("AAPL", start_date = "2019-01-01")
#calculate log daily returns
returns_tib <- tibble(returns = diff(log(roku_price$adjClose), lag=1))
#plot log daily returns
returns_tib %>% ggplot(aes(x=returns)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
u = mean(returns_tib$returns)
var = var(returns_tib$returns)
drift = u - (0.5*var)
stdd = sqrt(var)
drift
u
gbm <- gbm_vec(nsim = 1000, t = 37, mu = u, sigma = stdd, S0)
View(gbm)
sigma
u = mean(returns_tib$returns)
u
View(aapl_daily_returns)
View(returns_tib)
#get prices for ROKU
roku_price <- riingo_prices("AAPL", start_date = "2019-01-01")
#calculate log daily returns
returns_tib <- tibble(returns = diff(log(roku_price$adjClose), lag=1))
View(returns_tib)
aapl_daily_returns <- roku_price %>%
tq_transmute(select = adjClose,           # this specifies which column to select
mutate_fun = periodReturn,   # This specifies what to do with that column
period = "daily",      # This argument calculates Daily returns
col_rename = "aapl_returns")
View(aapl_daily_returns)
#plot log daily returns
returns_tib %>% ggplot(aes(x=returns)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
u = mean(returns_tib$returns)
var = var(returns_tib$returns)
drift = u - (0.5*var)
stdd = sqrt(var)
nsim <- 1000
t <- 37
u
u*100
stdd
stdd*100
gbm <- gbm_vec(nsim = 1000, t = 37, mu = 0.2368, sigma = 2.37, S0)
gbm_df <- as.data.frame(gbm) %>%
mutate(ix = 1:nrow(gbm)) %>%
pivot_longer(-ix, names_to = 'sim', values_to = 'price')
gbm_df %>%
ggplot(aes(x=ix, y=price, color=sim)) +
geom_line() +
labs(x="Days", y="Price", title="1000 Simulations of AAPL price") +
theme(legend.position = 'none')
putPrice <- matrix(0,37,1000)
for (s in 1:ncol(gbm)){
for (t in 1:nrow(gbm)) {
putPrice[t,s] <- BlackScholes(gbm[t,s], 122.5, 0.01, (nrow(gbm)+1-t)/365, 0.37, "P")
}
}
plottest <- as.data.frame(putPrice) %>%
mutate(ix = 1:nrow(gbm)) %>%
pivot_longer(-ix, names_to = 'sim', values_to = 'price')
plottest %>%
ggplot(aes(x=ix, y=price, color=sim)) +
geom_line() +
labs(x="Days", y="Price", title="1000 Simulations of AAPL price") +
theme(legend.position = 'none')
putPrice <- matrix(0,37,1000)
for (s in 1:ncol(gbm)){
for (t in 1:nrow(gbm)) {
putPrice[t,s] <- BlackScholes(gbm[t,s], 122.5, 0.01, (nrow(gbm)+1-t)/365, 0.37, "P")
}
}
View(putPrice)
putPrice <- matrix(0,37,1000)
for (s in 1:ncol(gbm)){
for (t in 1:nrow(gbm)) {
putPrice[t,s] <- BlackScholes(gbm[t,s], 122.5, 0.01, (nrow(gbm)+1-t)/365, 0.37, "P")
}
}
View(putPrice)
plottest <- as.data.frame(putPrice) %>%
mutate(ix = 1:nrow(gbm)) %>%
pivot_longer(-ix, names_to = 'sim', values_to = 'price')
View(plottest)
for (s in 1:ncol(gbm)){
for (t in 1:nrow(gbm)) {
putPrice[t,s] <- BlackScholes(gbm[t,s], 122.5, 0.01, (nrow(gbm)+1-t)/365, 0.37, "P")
}
}
gbm <- gbm_vec(nsim = 1000, t = 37, mu = 0.2368, sigma = 2.37, S0)
View(gbm)
putPrice <- matrix(0,38,1000)
for (s in 1:ncol(gbm)){
for (t in 1:nrow(gbm)) {
putPrice[t,s] <- BlackScholes(gbm[t,s], 122.5, 0.01, (nrow(gbm)+1-t)/365, 0.37, "P")
}
}
plottest <- as.data.frame(putPrice) %>%
mutate(ix = 1:nrow(gbm)) %>%
pivot_longer(-ix, names_to = 'sim', values_to = 'price')
plottest %>%
ggplot(aes(x=ix, y=price, color=sim)) +
geom_line() +
labs(x="Days", y="Price", title="1000 Simulations of AAPL price") +
theme(legend.position = 'none')
View(plottest)
plottest %>% group_by(sim)
my_df<-data.frame(name=c("abe", "ben", "chris", "doug", "ethan"),
key1=c("apple", "apple", "banana", "apple", "orange"),
key2=c("apple", NA, "orange", NA, NA),
key3=c(NA, NA, "apple", NA, NA),
stringsAsFactors = FALSE)
my_df
plottest
plottest %>% filter(price < 0.85)
plottest %>% filter("price" < 0.85)
query1 <- plottest %>% filter("price" < 0.85)
query1 <- plottest %>% group_by(sim) %>% filter(price<0.85)
plottest$price
query1 <- plottest %>% group_by(sim) %>% filter(plottest,price<0.85)
View(plottest)
type(plottest)
aaply_daily_returns %>% filter()
aapl_daily_returns %>% filter(aapl_returns<0.02)
query1 <- plottest %>% group_by(sim) %>% dplyr::filter(plottest,price<0.85)
query1 <- plottest %>% group_by(sim) %>% dplyr::filter(price<0.85)
View(query1)
query1 %>% slice_min(1, order_by="sim")
query1 %>% group_by(sim) %>% slice_head()
query2 <- query1 %>% group_by(sim) %>% slice_head()
length(query2)
View(query2)
nrow(query2)
859/1000
plottest %>%
ggplot(aes(x=ix, y=price, color=sim)) +
geom_line() +
labs(x="Days", y="Price", title="1000 Simulations of AAPL 122.5 Put Price") +
ylim(0, 25) +
theme(legend.position = 'none')
plottest %>%
ggplot(aes(x=ix, y=price, color=sim)) +
geom_line() +
labs(x="Days", y="Price", title="1000 Simulations of AAPL 122.5 Put Price") +
coord_cartesian(
xlim = NULL,
ylim = (0,25),
expand = TRUE,
default = FALSE,
clip = "on"
) +
theme(legend.position = 'none')
plottest %>%
ggplot(aes(x=ix, y=price, color=sim)) +
geom_line() +
labs(x="Days", y="Price", title="1000 Simulations of AAPL 122.5 Put Price") +
coord_cartesian(
xlim = NULL,
ylim = (0,25),
expand = TRUE,
default = FALSE,
clip = "on"
) +
theme(legend.position = 'none')
plottest %>%
ggplot(aes(x=ix, y=price, color=sim)) +
geom_line() +
labs(x="Days", y="Price", title="1000 Simulations of AAPL 122.5 Put Price") +
coord_cartesian(
xlim = NULL,
ylim = c(0,25),
expand = TRUE,
default = FALSE,
clip = "on"
) +
theme(legend.position = 'none')
#plot log daily returns
returns_tib %>% ggplot(aes(x=returns)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8) +
labs(y="Density", x="Returns", title="Distribution of AAPL returns (1 year)")
plottest %>%
sample_frac(10) %>%
ggplot(aes(x=ix, y=price, color=sim)) +
geom_line() +
labs(x="Days", y="Price", title="1000 Simulations of AAPL 122.5 Put Price") +
coord_cartesian(
xlim = NULL,
ylim = c(0,25),
expand = TRUE,
default = FALSE,
clip = "on"
) +
theme(legend.position = 'none')
plottest %>%
sample_frac(0.2) %>%
ggplot(aes(x=ix, y=price, color=sim)) +
geom_line() +
labs(x="Days", y="Price", title="1000 Simulations of AAPL 122.5 Put Price") +
coord_cartesian(
xlim = NULL,
ylim = c(0,25),
expand = TRUE,
default = FALSE,
clip = "on"
) +
theme(legend.position = 'none')
plottest %>%
sample_frac(0.1) %>%
ggplot(aes(x=ix, y=price, color=sim)) +
geom_line() +
labs(x="Days", y="Price", title="1000 Simulations of AAPL 122.5 Put Price") +
coord_cartesian(
xlim = NULL,
ylim = c(0,25),
expand = TRUE,
default = FALSE,
clip = "on"
) +
theme(legend.position = 'none')
plottest %>%
sample_frac(0.1) %>%
ggplot(aes(x=ix, y=price, color=sim)) +
geom_line() +
labs(x="Days", y="Price", title="1000 Simulations of AAPL 122.5 Put Price") +
coord_cartesian(
xlim = NULL,
ylim = c(0,3),
expand = TRUE,
default = FALSE,
clip = "on"
) +
theme(legend.position = 'none')
plottest %>%
sample_frac(0.05) %>%
ggplot(aes(x=ix, y=price, color=sim)) +
geom_line() +
labs(x="Days", y="Price", title="1000 Simulations of AAPL 122.5 Put Price") +
coord_cartesian(
xlim = NULL,
ylim = c(0,3),
expand = TRUE,
default = FALSE,
clip = "on"
) +
theme(legend.position = 'none')
plottest %>%
sample_frac(0.02) %>%
ggplot(aes(x=ix, y=price, color=sim)) +
geom_line() +
labs(x="Days", y="Price", title="1000 Simulations of AAPL 122.5 Put Price") +
coord_cartesian(
xlim = NULL,
ylim = c(0,3),
expand = TRUE,
default = FALSE,
clip = "on"
) +
theme(legend.position = 'none')
plottest %>%
sample_frac(0.05) %>%
ggplot(aes(x=ix, y=price, color=sim)) +
geom_line() +
labs(x="Days", y="Price", title="1000 Simulations of AAPL 122.5 Put Price") +
coord_cartesian(
xlim = NULL,
ylim = c(0,3),
expand = TRUE,
default = FALSE,
clip = "on"
) +
theme(legend.position = 'none')
putPrice
view(putPrice)
putPrice[1:10,]
tempo <- putPrice[1:10]
view(tempo)
tempo <- putPrice[,1:10]
View(tempo)
tempodf <- as.data.frame(tempo) %>%
mutate(ix = 1:nrow(gbm)) %>%
pivot_longer(-ix, names_to = 'sim', values_to = 'price')
tempodf %>%
ggplot(aes(x=ix, y=price, color=sim)) +
geom_line() +
labs(x="Days", y="Price", title="1000 Simulations of AAPL 122.5 Put Price") +
coord_cartesian(
xlim = NULL,
ylim = c(0,3),
expand = TRUE,
default = FALSE,
clip = "on"
) +
theme(legend.position = 'none')
tempodf <- as.data.frame(tempo) %>%
mutate(ix = 1:nrow(gbm)) %>%
pivot_longer(-ix, names_to = 'sim', values_to = 'price')
tempodf %>%
ggplot(aes(x=ix, y=price, color=sim)) +
geom_line() +
labs(x="Days", y="Price", title="10 Simulations of AAPL 122.5 Put Price") +
coord_cartesian(
xlim = NULL,
ylim = c(0,3),
expand = TRUE,
default = FALSE,
clip = "on"
) +
theme(legend.position = 'none')
cat("P50: ",(nrow(query2)/1000))
